/* Generated By:JJTree&JavaCC: Do not edit this line. BParser.java */
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

@SuppressWarnings("ALL")
public class BParser/*@bgen(jjtree)*/ implements BParserTreeConstants, BParserConstants {/*@bgen(jjtree)*/
  protected static JJTBParserState jjtree = new JJTBParserState();
    private static BParser singleton;
    private static String file;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BParser.file = file;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

    public static void jjtreeOpenNodeScope(Node n) {
        Token t = getToken(1);
        ((SimpleNode) n).setSourceCoordinates(new SourceCoordinates(file, t.beginLine, t.endLine, t.beginColumn, t.endColumn));
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public BParser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static final private int[] jj_la1 = new int[40];
    static final private JJCalls[] jj_2_rtns = new JJCalls[3];
    static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    static public BParserTokenManager token_source;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static SimpleCharStream jj_input_stream;
    static private boolean jj_initialized_once = false;
    static private int jj_ntk;
    static private Token jj_scanpos, jj_lastpos;
    static private int jj_la;
    static private int jj_gen;
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private boolean jj_rescan = false;
    static private int jj_gc = 0;
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;
    static private int[] jj_lasttokens = new int[100];
    static private int jj_endpos;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    /**
     * Constructor with InputStream.
     */
    public BParser(java.io.InputStream stream) {
        this(stream, null);
    }

    public static void jjtreeCloseNodeScope(Node n) {
    }

    /**
     * Constructor.
     */
    public BParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new BParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public BParser(BParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static final public SimpleNode parseMachine() throws ParseException {
        /*@bgen(jjtree) Machine */
        ASTMachine jjtn000 = new ASTMachine(JJTMACHINE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        Token name;
        try {
            jj_consume_token(MACHINE);
            name = jj_consume_token(IDENTIFIER);
            jjtn000.setValue(name.image);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONST_DEFS:
                    parseConstDefs();
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SET_DEFS:
                    parseSetDefs();
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VAR_DEFS:
                    parseVarDefs();
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FUN_DEFS:
                    parseFunDefs();
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INVARIANT:
                    parseInvariant();
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INITIALISATION:
                    parseInitialisation();
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EVENTS:
                    parseEvents();
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    ;
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            {
                if (true) return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final private void parseConstDefs() throws ParseException {
        jj_consume_token(CONST_DEFS);
        ASTConstDefs jjtn002 = new ASTConstDefs(JJTCONSTDEFS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
        try {
            label_1:
            while (true) {
                ASTConstDef jjtn001 = new ASTConstDef(JJTCONSTDEF);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
        try {
          parseConstDef();
        } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;}
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BOOL_TYPE:
                    case INT_TYPE:
                    case REAL_TYPE:
                    case SET_TYPE:
                    case STRING_TYPE:
                        ;
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        break label_1;
                }
            }
        } catch (Throwable jjte002) {
            if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte002;
                }
            }
            if (jjte002 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte002;
                }
            }
            {
                if (true) throw (Error) jjte002;
            }
        } finally {
            if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
                jjtreeCloseNodeScope(jjtn002);
            }
        }
    }

    static final private void parseConstDef() throws ParseException {
        Token t;
        parseType();
        parseIdentifier();
        jj_consume_token(EQ);
        parseExpr0();
    }

    static final private void parseSetDefs() throws ParseException {
        jj_consume_token(SET_DEFS);
        ASTSetDefs jjtn001 = new ASTSetDefs(JJTSETDEFS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
            label_2:
            while (true) {
                parseSetDef();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case SET_TYPE:
                        ;
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        break label_2;
                }
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;
                }
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    static final private void parseSetDef() throws ParseException {
        /*@bgen(jjtree) SetDef */
        ASTSetDef jjtn000 = new ASTSetDef(JJTSETDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            ASTSetType jjtn001 = new ASTSetType(JJTSETTYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                jj_consume_token(SET_TYPE);
                jj_consume_token(LT);
                parseType();
                jj_consume_token(GT);
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
            parseIdentifier();
            jj_consume_token(EQ);
            parseExpr0();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseVarDefs() throws ParseException {
        jj_consume_token(VAR_DEFS);
        ASTVarDefs jjtn001 = new ASTVarDefs(JJTVARDEFS);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
            label_3:
            while (true) {
                parseVarDef();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BOOL_TYPE:
                    case INT_TYPE:
                    case REAL_TYPE:
                    case SET_TYPE:
                    case STRING_TYPE:
                        ;
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        break label_3;
                }
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;
                }
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    static final private void parseVarDef() throws ParseException {
        /*@bgen(jjtree) VarDef */
        ASTVarDef jjtn000 = new ASTVarDef(JJTVARDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            parseType();
            parseIdentifier();
            jj_consume_token(IN);
            parseExpr0();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseFunDefs() throws ParseException {
        /*@bgen(jjtree) FunDefs */
        ASTFunDefs jjtn000 = new ASTFunDefs(JJTFUNDEFS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(FUN_DEFS);
            label_4:
            while (true) {
                parseFunDef();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BOOL_TYPE:
                    case INT_TYPE:
                    case REAL_TYPE:
                    case SET_TYPE:
                    case STRING_TYPE:
                        ;
                        break;
                    default:
                        jj_la1[10] = jj_gen;
                        break label_4;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseFunDef() throws ParseException {
        /*@bgen(jjtree) FunDef */
        ASTFunDef jjtn000 = new ASTFunDef(JJTFUNDEF);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            parseType();
            jj_consume_token(TO);
            parseType();
            parseIdentifier();
            jj_consume_token(IN);
            parseExpr0();
            jj_consume_token(TO);
            parseExpr0();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseInvariant() throws ParseException {
        jj_consume_token(INVARIANT);
        ASTInvariant jjtn001 = new ASTInvariant(JJTINVARIANT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
            parseExpr0();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;
                }
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    static final private void parseInitialisation() throws ParseException {
        jj_consume_token(INITIALISATION);
        ASTInitialisation jjtn001 = new ASTInitialisation(JJTINITIALISATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
            parseSubstitution();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte001;
                }
            }
            {
                if (true) throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    static final private void parseEvents() throws ParseException {
        /*@bgen(jjtree) Events */
        ASTEvents jjtn000 = new ASTEvents(JJTEVENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            jj_consume_token(EVENTS);
            label_5:
            while (true) {
                parseIdentifier();
                jj_consume_token(EQ);
                ASTEvent jjtn001 = new ASTEvent(JJTEVENT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    parseSubstitution();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, 2);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        ;
                        break;
                    default:
                        jj_la1[11] = jj_gen;
                        break label_5;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseSubstitution() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case SUB_SKIP:
                ASTSkip jjtn001 = new ASTSkip(JJTSKIP);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    jj_consume_token(SUB_SKIP);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case IDENTIFIER:
                parseIdentifier();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case ASSIGN:
                        jj_consume_token(ASSIGN);
                        ASTVarAssignment jjtn002 = new ASTVarAssignment(JJTVARASSIGNMENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
                        try {
                            parseExpr0();
                        } catch (Throwable jjte002) {
                            if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte002;
                                }
                            }
                            if (jjte002 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte002;
                                }
                            }
                            {
                                if (true) throw (Error) jjte002;
                            }
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, 2);
                                jjtreeCloseNodeScope(jjtn002);
                            }
                        }
                        break;
                    case 58:
                        jj_consume_token(58);
                        parseExpr0();
                        jj_consume_token(59);
                        jj_consume_token(ASSIGN);
                        ASTFunAssignment jjtn003 = new ASTFunAssignment(JJTFUNASSIGNMENT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                        try {
                            parseExpr0();
                        } catch (Throwable jjte003) {
                            if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte003 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte003;
                                }
                            }
                            if (jjte003 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte003;
                                }
                            }
                            {
                                if (true) throw (Error) jjte003;
                            }
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, 3);
                                jjtreeCloseNodeScope(jjtn003);
                            }
                        }
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            case SELECT:
                jj_consume_token(SELECT);
                parseExpr0();
                jj_consume_token(THEN);
                parseSubstitution();
                ASTSelect jjtn004 = new ASTSelect(JJTSELECT);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);
                try {
                    jj_consume_token(END);
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, 2);
                        jjtreeCloseNodeScope(jjtn004);
                    }
                }
                break;
            case IF:
                jj_consume_token(IF);
                parseExpr0();
                jj_consume_token(THEN);
                parseSubstitution();
                jj_consume_token(ELSE);
                parseSubstitution();
                ASTIfThenElse jjtn005 = new ASTIfThenElse(JJTIFTHENELSE);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtreeOpenNodeScope(jjtn005);
                try {
                    jj_consume_token(END);
                } finally {
                    if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, 3);
                        jjtreeCloseNodeScope(jjtn005);
                    }
                }
                break;
            case CHOICE:
                ASTChoice jjtn006 = new ASTChoice(JJTCHOICE);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
                jjtreeOpenNodeScope(jjtn006);
                try {
                    jj_consume_token(CHOICE);
                    parseSubstitution();
                    label_6:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case SUB_OR:
                                ;
                                break;
                            default:
                                jj_la1[13] = jj_gen;
                                break label_6;
                        }
                        jj_consume_token(SUB_OR);
                        parseSubstitution();
                    }
                    jj_consume_token(END);
                } catch (Throwable jjte006) {
                    if (jjtc006) {
                        jjtree.clearNodeScope(jjtn006);
                        jjtc006 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte006;
                        }
                    }
                    if (jjte006 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte006;
                        }
                    }
                    {
                        if (true) throw (Error) jjte006;
                    }
                } finally {
                    if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, true);
                        jjtreeCloseNodeScope(jjtn006);
                    }
                }
                break;
            case ANY:
                ASTAny jjtn008 = new ASTAny(JJTANY);
                boolean jjtc008 = true;
                jjtree.openNodeScope(jjtn008);
                jjtreeOpenNodeScope(jjtn008);
                try {
                    jj_consume_token(ANY);
                    ASTQuantifiedSymbolsDefs jjtn007 = new ASTQuantifiedSymbolsDefs(JJTQUANTIFIEDSYMBOLSDEFS);
                    boolean jjtc007 = true;
                    jjtree.openNodeScope(jjtn007);
                    jjtreeOpenNodeScope(jjtn007);
                    try {
                        parseDef();
                        label_7:
                        while (true) {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case BOOL_TYPE:
                                case INT_TYPE:
                                case REAL_TYPE:
                                case SET_TYPE:
                                case STRING_TYPE:
                                case 60:
                                    ;
                                    break;
                                default:
                                    jj_la1[14] = jj_gen;
                                    break label_7;
                            }
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case 60:
                                    jj_consume_token(60);
                                    break;
                                default:
                                    jj_la1[15] = jj_gen;
                                    ;
                            }
                            parseDef();
                        }
                    } catch (Throwable jjte007) {
                        if (jjtc007) {
                            jjtree.clearNodeScope(jjtn007);
                            jjtc007 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte007 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte007;
                            }
                        }
                        if (jjte007 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte007;
                            }
                        }
                        {
                            if (true) throw (Error) jjte007;
                        }
                    } finally {
                        if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007, true);
                            jjtreeCloseNodeScope(jjtn007);
                        }
                    }
                    jj_consume_token(WHERE);
                    parseExpr0();
                    jj_consume_token(THEN);
                    parseSubstitution();
                    jj_consume_token(END);
                } catch (Throwable jjte008) {
                    if (jjtc008) {
                        jjtree.clearNodeScope(jjtn008);
                        jjtc008 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte008 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte008;
                        }
                    }
                    if (jjte008 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte008;
                        }
                    }
                    {
                        if (true) throw (Error) jjte008;
                    }
                } finally {
                    if (jjtc008) {
                        jjtree.closeNodeScope(jjtn008, 3);
                        jjtreeCloseNodeScope(jjtn008);
                    }
                }
                break;
            default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        label_8:
        while (true) {
            if (jj_2_1(2)) {
                ;
            } else {
                break label_8;
            }
            jj_consume_token(SEQUENCE);
            parseSubstitution();
            ASTSequence jjtn009 = new ASTSequence(JJTSEQUENCE);
            boolean jjtc009 = true;
            jjtree.openNodeScope(jjtn009);
            jjtreeOpenNodeScope(jjtn009);
            try {
                if (jj_2_2(2)) {
                    jj_consume_token(SEQUENCE);
                } else {
                    ;
                }
            } finally {
                if (jjtc009) {
                    jjtree.closeNodeScope(jjtn009, 2);
                    jjtreeCloseNodeScope(jjtn009);
                }
            }
        }
    }

    static final private void parseDef() throws ParseException {
        Token t;
        if (jj_2_3(3)) {
            ASTQuantifiedVarDef jjtn001 = new ASTQuantifiedVarDef(JJTQUANTIFIEDVARDEF);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseType();
                parseIdentifier();
                jj_consume_token(IN);
                parseExpr0();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BOOL_TYPE:
                case INT_TYPE:
                case REAL_TYPE:
                case SET_TYPE:
                case STRING_TYPE:
                    ASTQuantifiedFunDef jjtn002 = new ASTQuantifiedFunDef(JJTQUANTIFIEDFUNDEF);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseType();
                        jj_consume_token(TO);
                        parseType();
                        parseIdentifier();
                        jj_consume_token(IN);
                        parseExpr0();
                        jj_consume_token(TO);
                        parseExpr0();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final public SimpleNode parseExpr() throws ParseException {
        /*@bgen(jjtree) Expr */
        ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            parseExpr0();
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            {
                if (true) return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final private void parseExpr0() throws ParseException {
        /*@bgen(jjtree) Expr */
        ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            parseExpr1();
            label_9:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case EQUIV:
                        ;
                        break;
                    default:
                        jj_la1[18] = jj_gen;
                        break label_9;
                }
                jj_consume_token(EQUIV);
                ASTEquiv jjtn001 = new ASTEquiv(JJTEQUIV);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    parseExpr1();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, 2);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    static final private void parseExpr1() throws ParseException {
        parseExpr2();
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IMPLIES:
                    ;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_10;
            }
            jj_consume_token(IMPLIES);
            ASTImplies jjtn001 = new ASTImplies(JJTIMPLIES);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr2();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr2() throws ParseException {
        parseExpr3();
        label_11:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OR:
                    ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_11;
            }
            jj_consume_token(OR);
            ASTOr jjtn001 = new ASTOr(JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr3();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr3() throws ParseException {
        parseExpr4();
        label_12:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AND:
                    ;
                    break;
                default:
                    jj_la1[21] = jj_gen;
                    break label_12;
            }
            jj_consume_token(AND);
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr4();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr4() throws ParseException {
        parseExpr5();
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                case NEQ:
                    ;
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_13;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                    jj_consume_token(EQ);
                    ASTEq jjtn001 = new ASTEq(JJTEQ);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseExpr5();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case NEQ:
                    jj_consume_token(NEQ);
                    ASTNEq jjtn002 = new ASTNEq(JJTNEQ);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseExpr5();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseExpr5() throws ParseException {
        parseExpr6();
        label_14:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IN:
                case NOT_IN:
                    ;
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    break label_14;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IN:
                    jj_consume_token(IN);
                    ASTIn jjtn001 = new ASTIn(JJTIN);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseExpr6();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case NOT_IN:
                    jj_consume_token(NOT_IN);
                    ASTNotIn jjtn002 = new ASTNotIn(JJTNOTIN);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseExpr6();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseExpr6() throws ParseException {
        parseExpr7();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LT:
            case LE:
            case GT:
            case GE:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LT:
                        jj_consume_token(LT);
                        ASTLT jjtn001 = new ASTLT(JJTLT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                        try {
                            parseExpr7();
                        } catch (Throwable jjte001) {
                            if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte001;
                                }
                            }
                            if (jjte001 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte001;
                                }
                            }
                            {
                                if (true) throw (Error) jjte001;
                            }
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, 2);
                                jjtreeCloseNodeScope(jjtn001);
                            }
                        }
                        break;
                    case LE:
                        jj_consume_token(LE);
                        ASTLE jjtn002 = new ASTLE(JJTLE);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
                        try {
                            parseExpr7();
                        } catch (Throwable jjte002) {
                            if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte002;
                                }
                            }
                            if (jjte002 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte002;
                                }
                            }
                            {
                                if (true) throw (Error) jjte002;
                            }
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, 2);
                                jjtreeCloseNodeScope(jjtn002);
                            }
                        }
                        break;
                    case GT:
                        jj_consume_token(GT);
                        ASTGT jjtn003 = new ASTGT(JJTGT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                        try {
                            parseExpr7();
                        } catch (Throwable jjte003) {
                            if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte003 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte003;
                                }
                            }
                            if (jjte003 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte003;
                                }
                            }
                            {
                                if (true) throw (Error) jjte003;
                            }
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, 2);
                                jjtreeCloseNodeScope(jjtn003);
                            }
                        }
                        break;
                    case GE:
                        jj_consume_token(GE);
                        ASTGE jjtn004 = new ASTGE(JJTGE);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtreeOpenNodeScope(jjtn004);
                        try {
                            parseExpr7();
                        } catch (Throwable jjte004) {
                            if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte004 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte004;
                                }
                            }
                            if (jjte004 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte004;
                                }
                            }
                            {
                                if (true) throw (Error) jjte004;
                            }
                        } finally {
                            if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, 2);
                                jjtreeCloseNodeScope(jjtn004);
                            }
                        }
                        break;
                    default:
                        jj_la1[26] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[27] = jj_gen;
                ;
        }
    }

    static final private void parseExpr7() throws ParseException {
        parseExpr8();
        label_15:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MINUS:
                case PLUS:
                    ;
                    break;
                default:
                    jj_la1[28] = jj_gen;
                    break label_15;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseExpr8();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    ASTMinus jjtn002 = new ASTMinus(JJTMINUS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseExpr8();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseExpr8() throws ParseException {
        parseTerminal();
        label_16:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                case DIV:
                case MOD:
                    ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_16;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                    jj_consume_token(TIMES);
                    ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case DIV:
                    jj_consume_token(DIV);
                    ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                case MOD:
                    jj_consume_token(MOD);
                    ASTMod jjtn003 = new ASTMod(JJTMOD);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte003) {
                        if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte003;
                            }
                        }
                        if (jjte003 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte003;
                            }
                        }
                        {
                            if (true) throw (Error) jjte003;
                        }
                    } finally {
                        if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, 2);
                            jjtreeCloseNodeScope(jjtn003);
                        }
                    }
                    break;
                default:
                    jj_la1[31] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseTerminal() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NOT:
                jj_consume_token(NOT);
                ASTNot jjtn001 = new ASTNot(JJTNOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    parseTerminal();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, 1);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case MINUS:
                jj_consume_token(MINUS);
                ASTUMinus jjtn002 = new ASTUMinus(JJTUMINUS);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try {
                    parseTerminal();
                } catch (Throwable jjte002) {
                    if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte002;
                        }
                    }
                    if (jjte002 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte002;
                        }
                    }
                    {
                        if (true) throw (Error) jjte002;
                    }
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, 1);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                break;
            case PLUS:
                jj_consume_token(PLUS);
                parseTerminal();
                break;
            case IDENTIFIER:
                parseIdentifier();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        jj_consume_token(58);
                        parseExpr0();
                        ASTFunCall jjtn003 = new ASTFunCall(JJTFUNCALL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                        try {
                            jj_consume_token(59);
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, 2);
                                jjtreeCloseNodeScope(jjtn003);
                            }
                        }
                        break;
                    default:
                        jj_la1[32] = jj_gen;
                        ;
                }
                break;
            case FALSE:
                ASTFalse jjtn004 = new ASTFalse(JJTFALSE);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);
                try {
                    jj_consume_token(FALSE);
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, 0);
                        jjtreeCloseNodeScope(jjtn004);
                    }
                }
                break;
            case TRUE:
                ASTTrue jjtn005 = new ASTTrue(JJTTRUE);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtreeOpenNodeScope(jjtn005);
                try {
                    jj_consume_token(TRUE);
                } finally {
                    if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, 0);
                        jjtreeCloseNodeScope(jjtn005);
                    }
                }
                break;
            case DOUBLE:
                t = jj_consume_token(DOUBLE);
                ASTDouble jjtn006 = new ASTDouble(JJTDOUBLE);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
                jjtreeOpenNodeScope(jjtn006);
                try {
                    jjtree.closeNodeScope(jjtn006, 0);
                    jjtc006 = false;
                    jjtreeCloseNodeScope(jjtn006);
                    jjtn006.setValue(t.image);
                } finally {
                    if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, 0);
                        jjtreeCloseNodeScope(jjtn006);
                    }
                }
                break;
            case INT:
                t = jj_consume_token(INT);
                ASTInt jjtn007 = new ASTInt(JJTINT);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
                jjtreeOpenNodeScope(jjtn007);
                try {
                    jjtree.closeNodeScope(jjtn007, 0);
                    jjtc007 = false;
                    jjtreeCloseNodeScope(jjtn007);
                    jjtn007.setValue(t.image);
                } finally {
                    if (jjtc007) {
                        jjtree.closeNodeScope(jjtn007, 0);
                        jjtreeCloseNodeScope(jjtn007);
                }
      }
      break;
    case 58:
        jj_consume_token(58);
      parseExpr0();
      jj_consume_token(59);
      break;
    case EXISTS:
      ASTExists jjtn009 = new ASTExists(JJTEXISTS);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
      jjtreeOpenNodeScope(jjtn009);
      try {
        jj_consume_token(EXISTS);
        jj_consume_token(58);
                    ASTQuantifiedSymbolsDefs jjtn008 = new ASTQuantifiedSymbolsDefs(JJTQUANTIFIEDSYMBOLSDEFS);
          boolean jjtc008 = true;
          jjtree.openNodeScope(jjtn008);
          jjtreeOpenNodeScope(jjtn008);
          try {
              parseDef();
              label_17:
              while (true) {
                  switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                      case 60:
                          ;
                          break;
                      default:
                          jj_la1[33] = jj_gen;
                          break label_17;
                  }
                  jj_consume_token(60);
                  parseDef();
              }
          } catch (Throwable jjte008) {
              if (jjtc008) {
                  jjtree.clearNodeScope(jjtn008);
                  jjtc008 = false;
              } else {
                  jjtree.popNode();
              }
              if (jjte008 instanceof RuntimeException) {
                  {
                      if (true) throw (RuntimeException) jjte008;
                  }
              }
              if (jjte008 instanceof ParseException) {
                  {
                      if (true) throw (ParseException) jjte008;
                  }
              }
              {
                  if (true) throw (Error) jjte008;
              }
          } finally {
              if (jjtc008) {
                  jjtree.closeNodeScope(jjtn008, true);
                  jjtreeCloseNodeScope(jjtn008);
              }
        }
          jj_consume_token(59);
          jj_consume_token(61);
        jj_consume_token(58);
          parseExpr0();
          jj_consume_token(59);
      } catch (Throwable jjte009) {
          if (jjtc009) {
              jjtree.clearNodeScope(jjtn009);
              jjtc009 = false;
          } else {
              jjtree.popNode();
          }
          if (jjte009 instanceof RuntimeException) {
              {
                  if (true) throw (RuntimeException) jjte009;
              }
          }
          if (jjte009 instanceof ParseException) {
              {
                  if (true) throw (ParseException) jjte009;
              }
          }
          {
              if (true) throw (Error) jjte009;
          }
      } finally {
          if (jjtc009) {
              jjtree.closeNodeScope(jjtn009, 2);
              jjtreeCloseNodeScope(jjtn009);
      }
      }
      break;
    case FORALL:
      ASTForAll jjtn011 = new ASTForAll(JJTFORALL);
      boolean jjtc011 = true;
      jjtree.openNodeScope(jjtn011);
      jjtreeOpenNodeScope(jjtn011);
      try {
        jj_consume_token(FORALL);
        jj_consume_token(58);
                    ASTQuantifiedSymbolsDefs jjtn010 = new ASTQuantifiedSymbolsDefs(JJTQUANTIFIEDSYMBOLSDEFS);
          boolean jjtc010 = true;
          jjtree.openNodeScope(jjtn010);
          jjtreeOpenNodeScope(jjtn010);
          try {
              parseDef();
              label_18:
              while (true) {
                  switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                      case 60:
                          ;
                          break;
                      default:
                          jj_la1[34] = jj_gen;
                          break label_18;
                  }
                  jj_consume_token(60);
                  parseDef();
              }
          } catch (Throwable jjte010) {
              if (jjtc010) {
                  jjtree.clearNodeScope(jjtn010);
                  jjtc010 = false;
              } else {
                  jjtree.popNode();
              }
              if (jjte010 instanceof RuntimeException) {
                  {
                      if (true) throw (RuntimeException) jjte010;
                  }
              }
              if (jjte010 instanceof ParseException) {
                  {
                      if (true) throw (ParseException) jjte010;
                  }
              }
              {
                  if (true) throw (Error) jjte010;
              }
          } finally {
              if (jjtc010) {
                  jjtree.closeNodeScope(jjtn010, true);
                  jjtreeCloseNodeScope(jjtn010);
              }
        }
          jj_consume_token(59);
          jj_consume_token(61);
        jj_consume_token(58);
          parseExpr0();
          jj_consume_token(59);
      } catch (Throwable jjte011) {
          if (jjtc011) {
              jjtree.clearNodeScope(jjtn011);
              jjtc011 = false;
          } else {
              jjtree.popNode();
          }
          if (jjte011 instanceof RuntimeException) {
              {
                  if (true) throw (RuntimeException) jjte011;
              }
          }
          if (jjte011 instanceof ParseException) {
              {
                  if (true) throw (ParseException) jjte011;
              }
          }
          {
              if (true) throw (Error) jjte011;
          }
      } finally {
          if (jjtc011) {
              jjtree.closeNodeScope(jjtn011, 2);
              jjtreeCloseNodeScope(jjtn011);
          }
      }
        break;
            case 62:
            case 64:
                parseSetExpr();
                break;
            case STRING:
                t = jj_consume_token(STRING);
                ASTString jjtn012 = new ASTString(JJTSTRING);
                boolean jjtc012 = true;
                jjtree.openNodeScope(jjtn012);
                jjtreeOpenNodeScope(jjtn012);
                try {
                    jjtree.closeNodeScope(jjtn012, 0);
                    jjtc012 = false;
                    jjtreeCloseNodeScope(jjtn012);
                    jjtn012.setValue(t.image);
                } finally {
                    if (jjtc012) {
                        jjtree.closeNodeScope(jjtn012, 0);
                        jjtreeCloseNodeScope(jjtn012);
                    }
                }
                break;
            default:
                jj_la1[35] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final private void parseIdentifier() throws ParseException {
        Token t;
        t = jj_consume_token(IDENTIFIER);
        ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
            jjtree.closeNodeScope(jjtn001, 0);
            jjtc001 = false;
            jjtreeCloseNodeScope(jjtn001);
            jjtn001.setValue(t.image);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, 0);
                jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    static final private void parseSetExpr() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 62:
                ASTSet jjtn001 = new ASTSet(JJTSET);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    jj_consume_token(62);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case NOT:
                        case EXISTS:
                        case FORALL:
                        case FALSE:
                        case TRUE:
                        case MINUS:
                        case PLUS:
                        case DOUBLE:
                        case INT:
                        case STRING:
                        case IDENTIFIER:
                        case 58:
                        case 62:
                        case 64:
                            parseExpr0();
                            break;
                        default:
                            jj_la1[36] = jj_gen;
                            ;
                    }
                    label_19:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case 60:
                                ;
                                break;
                            default:
                                jj_la1[37] = jj_gen;
                                break label_19;
                        }
                        jj_consume_token(60);
                        parseExpr0();
                    }
                    jj_consume_token(63);
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case 64:
                jj_consume_token(64);
                parseExpr0();
                jj_consume_token(65);
                parseExpr0();
                ASTRange jjtn002 = new ASTRange(JJTRANGE);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try {
                    jj_consume_token(66);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, 2);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                break;
            default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final private void parseType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BOOL_TYPE:
                ASTBoolType jjtn001 = new ASTBoolType(JJTBOOLTYPE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    jj_consume_token(BOOL_TYPE);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case INT_TYPE:
                ASTArithType jjtn003 = new ASTArithType(JJTARITHTYPE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtreeOpenNodeScope(jjtn003);
                try {
                    ASTIntType jjtn002 = new ASTIntType(JJTINTTYPE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        jj_consume_token(INT_TYPE);
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtreeCloseNodeScope(jjtn003);
                    }
                }
                break;
            case REAL_TYPE:
                ASTArithType jjtn005 = new ASTArithType(JJTARITHTYPE);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtreeOpenNodeScope(jjtn005);
                try {
                    ASTRealType jjtn004 = new ASTRealType(JJTREALTYPE);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                    jjtreeOpenNodeScope(jjtn004);
                    try {
                        jj_consume_token(REAL_TYPE);
                    } finally {
                        if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004, true);
                            jjtreeCloseNodeScope(jjtn004);
                        }
                    }
                } finally {
                    if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtreeCloseNodeScope(jjtn005);
                    }
                }
                break;
            case SET_TYPE:
                ASTSetType jjtn006 = new ASTSetType(JJTSETTYPE);
                boolean jjtc006 = true;
                jjtree.openNodeScope(jjtn006);
                jjtreeOpenNodeScope(jjtn006);
                try {
                    jj_consume_token(SET_TYPE);
                    jj_consume_token(LT);
                    parseType();
                    jj_consume_token(GT);
                } catch (Throwable jjte006) {
                    if (jjtc006) {
                        jjtree.clearNodeScope(jjtn006);
                        jjtc006 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte006 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte006;
                        }
                    }
                    if (jjte006 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte006;
                        }
                    }
                    {
                        if (true) throw (Error) jjte006;
                    }
                } finally {
                    if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006, true);
                        jjtreeCloseNodeScope(jjtn006);
                    }
                }
                break;
            case STRING_TYPE:
                ASTStringType jjtn007 = new ASTStringType(JJTSTRINGTYPE);
                boolean jjtc007 = true;
                jjtree.openNodeScope(jjtn007);
                jjtreeOpenNodeScope(jjtn007);
                try {
                    jj_consume_token(STRING_TYPE);
                } finally {
                    if (jjtc007) {
                        jjtree.closeNodeScope(jjtn007, true);
                        jjtreeCloseNodeScope(jjtn007);
                    }
                }
                break;
            default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    static private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    static private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    static private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    jj_scanpos = xsp;
                    if (jj_3R_26()) {
                        jj_scanpos = xsp;
                        if (jj_3R_27()) {
                            jj_scanpos = xsp;
                            if (jj_3R_28()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_22() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    static private boolean jj_3_3() {
        if (jj_3R_21()) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(IN)) return true;
        return false;
    }

    static private boolean jj_3R_28() {
        if (jj_scan_token(ANY)) return true;
        return false;
    }

    static private boolean jj_3R_33() {
        if (jj_scan_token(STRING_TYPE)) return true;
        return false;
    }

    static private boolean jj_3R_27() {
        if (jj_scan_token(CHOICE)) return true;
        return false;
    }

    static private boolean jj_3_1() {
        if (jj_scan_token(SEQUENCE)) return true;
        if (jj_3R_20()) return true;
        return false;
    }

    static private boolean jj_3R_32() {
        if (jj_scan_token(SET_TYPE)) return true;
        if (jj_scan_token(LT)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    static private boolean jj_3_2() {
        if (jj_scan_token(SEQUENCE)) return true;
        return false;
    }

    static private boolean jj_3R_31() {
        if (jj_scan_token(REAL_TYPE)) return true;
        return false;
    }

    static private boolean jj_3R_26() {
        if (jj_scan_token(IF)) return true;
        return false;
    }

    static private boolean jj_3R_30() {
        if (jj_scan_token(INT_TYPE)) return true;
        return false;
    }

    static private boolean jj_3R_25() {
        if (jj_scan_token(SELECT)) return true;
        return false;
    }

    static private boolean jj_3R_29() {
        if (jj_scan_token(BOOL_TYPE)) return true;
        return false;
    }

    static private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_29()) {
            jj_scanpos = xsp;
            if (jj_3R_30()) {
                jj_scanpos = xsp;
                if (jj_3R_31()) {
                    jj_scanpos = xsp;
                    if (jj_3R_32()) {
                        jj_scanpos = xsp;
                        if (jj_3R_33()) return true;
                    }
                }
            }
        }
        return false;
    }

    static private boolean jj_3R_23() {
        if (jj_scan_token(SUB_SKIP)) return true;
        return false;
    }

    static private boolean jj_3R_24() {
        if (jj_3R_22()) return true;
        return false;
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x800, 0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x3e0, 0x100, 0x3e0, 0x3e0, 0x0, 0x80000, 0x4000000, 0x3e0, 0x0, 0xa940000, 0x3e0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x4000000, 0x0, 0x10000000, 0x10000000, 0x2000000, 0x0, 0x0, 0x1, 0x2, 0x4, 0x28, 0x28, 0x2400, 0x2400, 0x3c0, 0x3c0, 0x30000, 0x30000, 0x1c0000, 0x1c0000, 0x4000000, 0x10000000, 0x10000000, 0x4763d810, 0x4763d810, 0x10000000, 0x40000000, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x1, 0x0,};
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                exists = true;
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) break;
                }
            }
            if (!exists) jj_expentries.add(jj_expentry);
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[67];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 40; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 67; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

    static private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 3; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    static private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(BParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
