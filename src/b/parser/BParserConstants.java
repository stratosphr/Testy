/* Generated By:JJTree&JavaCC: Do not edit this line. BParserConstants.java */
package b.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int MACHINE = 5;
    /**
     * RegularExpression Id.
     */
    int CONST_DEFS = 6;
    /**
     * RegularExpression Id.
     */
    int SET_DEFS = 7;
    /**
     * RegularExpression Id.
     */
    int VAR_DEFS = 8;
    /**
     * RegularExpression Id.
     */
    int FUN_DEFS = 9;
    /**
     * RegularExpression Id.
     */
    int INVARIANT = 10;
    /**
     * RegularExpression Id.
     */
    int INITIALISATION = 11;
    /**
     * RegularExpression Id.
     */
    int EVENTS = 12;
    /**
     * RegularExpression Id.
     */
    int SUB_SKIP = 13;
    /**
     * RegularExpression Id.
     */
    int ASSIGN = 14;
    /**
     * RegularExpression Id.
     */
    int SELECT = 15;
    /**
     * RegularExpression Id.
     */
    int THEN = 16;
    /**
     * RegularExpression Id.
     */
    int END = 17;
    /**
     * RegularExpression Id.
     */
    int IF = 18;
    /**
     * RegularExpression Id.
     */
    int ELSE = 19;
    /**
     * RegularExpression Id.
     */
    int CHOICE = 20;
    /**
     * RegularExpression Id.
     */
    int SUB_OR = 21;
    /**
     * RegularExpression Id.
     */
    int ANY = 22;
    /**
     * RegularExpression Id.
     */
    int WHERE = 23;
    /**
     * RegularExpression Id.
     */
    int SEQUENCE = 24;
    /**
     * RegularExpression Id.
     */
    int TO = 25;
    /**
     * RegularExpression Id.
     */
    int EQUIV = 26;
    /**
     * RegularExpression Id.
     */
    int IMPLIES = 27;
    /**
     * RegularExpression Id.
     */
    int OR = 28;
    /**
     * RegularExpression Id.
     */
    int AND = 29;
    /**
     * RegularExpression Id.
     */
    int EQ = 30;
    /**
     * RegularExpression Id.
     */
    int NOT = 31;
    /**
     * RegularExpression Id.
     */
    int NEQ = 32;
    /**
     * RegularExpression Id.
     */
    int LT = 33;
    /**
     * RegularExpression Id.
     */
    int LE = 34;
    /**
     * RegularExpression Id.
     */
    int GT = 35;
    /**
     * RegularExpression Id.
     */
    int GE = 36;
    /**
     * RegularExpression Id.
     */
    int IN = 37;
    /**
     * RegularExpression Id.
     */
    int NOT_IN = 38;
    /**
     * RegularExpression Id.
     */
    int FALSE = 39;
    /**
     * RegularExpression Id.
     */
    int TRUE = 40;
    /**
     * RegularExpression Id.
     */
    int MINUS = 41;
    /**
     * RegularExpression Id.
     */
    int PLUS = 42;
    /**
     * RegularExpression Id.
     */
    int TIMES = 43;
    /**
     * RegularExpression Id.
     */
    int DIV = 44;
    /**
     * RegularExpression Id.
     */
    int MOD = 45;
    /**
     * RegularExpression Id.
     */
    int DOUBLE = 46;
    /**
     * RegularExpression Id.
     */
    int INT = 47;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 48;
    /**
     * RegularExpression Id.
     */
    int ENUMVALUE = 49;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 50;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\r\"",
            "\"\\t\"",
            "\"\\n\"",
            "\"MACHINE\"",
            "<CONST_DEFS>",
            "<SET_DEFS>",
            "<VAR_DEFS>",
            "<FUN_DEFS>",
            "<INVARIANT>",
            "<INITIALISATION>",
            "\"EVENTS\"",
            "\"SKIP\"",
            "\":=\"",
            "\"SELECT\"",
            "\"THEN\"",
            "\"END\"",
            "\"IF\"",
            "\"ELSE\"",
            "\"CHOICE\"",
            "\"OR\"",
            "\"ANY\"",
            "\"WHERE\"",
            "\";\"",
            "\"->\"",
            "<EQUIV>",
            "<IMPLIES>",
            "\"||\"",
            "\"&&\"",
            "\"=\"",
            "\"!\"",
            "<NEQ>",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "\":\"",
            "\"!:\"",
            "\"false\"",
            "\"true\"",
            "\"-\"",
            "\"+\"",
            "\"*\"",
            "\"/\"",
            "\"%\"",
            "<DOUBLE>",
            "<INT>",
            "<DIGIT>",
            "<ENUMVALUE>",
            "<IDENTIFIER>",
            "\"(\"",
            "\")\"",
            "\",\"",
            "\"{\"",
            "\"}\"",
            "\"[\"",
            "\"..\"",
            "\"]\"",
    };

}
