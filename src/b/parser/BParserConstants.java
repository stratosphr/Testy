/* Generated By:JJTree&JavaCC: Do not edit this line. BParserConstants.java */
package b.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int MACHINE = 5;
    /**
     * RegularExpression Id.
     */
    int CONST_DEFS = 6;
    /**
     * RegularExpression Id.
     */
    int SET_DEFS = 7;
    /**
     * RegularExpression Id.
     */
    int VAR_DEFS = 8;
    /**
     * RegularExpression Id.
     */
    int EQUIV = 9;
    /**
     * RegularExpression Id.
     */
    int IMPLIES = 10;
    /**
     * RegularExpression Id.
     */
    int OR = 11;
    /**
     * RegularExpression Id.
     */
    int AND = 12;
    /**
     * RegularExpression Id.
     */
    int EQ = 13;
    /**
     * RegularExpression Id.
     */
    int NOT = 14;
    /**
     * RegularExpression Id.
     */
    int NEQ = 15;
    /**
     * RegularExpression Id.
     */
    int LT = 16;
    /**
     * RegularExpression Id.
     */
    int LE = 17;
    /**
     * RegularExpression Id.
     */
    int GT = 18;
    /**
     * RegularExpression Id.
     */
    int GE = 19;
    /**
     * RegularExpression Id.
     */
    int IN = 20;
    /**
     * RegularExpression Id.
     */
    int FALSE = 21;
    /**
     * RegularExpression Id.
     */
    int TRUE = 22;
    /**
     * RegularExpression Id.
     */
    int MINUS = 23;
    /**
     * RegularExpression Id.
     */
    int PLUS = 24;
    /**
     * RegularExpression Id.
     */
    int TIMES = 25;
    /**
     * RegularExpression Id.
     */
    int DIV = 26;
    /**
     * RegularExpression Id.
     */
    int MOD = 27;
    /**
     * RegularExpression Id.
     */
    int DOUBLE = 28;
    /**
     * RegularExpression Id.
     */
    int INT = 29;
    /**
     * RegularExpression Id.
     */
    int DIGIT = 30;
    /**
     * RegularExpression Id.
     */
    int ENUMVALUE = 31;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 32;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "\" \"",
            "\"\\r\"",
            "\"\\t\"",
            "\"\\n\"",
            "\"MACHINE\"",
            "\"CONST_DEFS\"",
            "\"SET_DEFS\"",
            "\"VAR_DEFS\"",
            "<EQUIV>",
            "<IMPLIES>",
            "\"||\"",
            "\"&&\"",
            "\"=\"",
            "\"~\"",
            "<NEQ>",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "\":\"",
            "\"false\"",
            "\"true\"",
            "\"-\"",
            "\"+\"",
            "\"*\"",
            "\"/\"",
            "\"%\"",
            "<DOUBLE>",
            "<INT>",
            "<DIGIT>",
            "<ENUMVALUE>",
            "<IDENTIFIER>",
            "\"(\"",
            "\")\"",
            "\"{\"",
            "\"}\"",
            "\",\"",
    };

}
