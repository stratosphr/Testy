/* Generated By:JJTree&JavaCC: Do not edit this line. BParserTokenManager.java */
package b.parser;

/**
 * Token Manager.
 */
public class BParserTokenManager implements BParserConstants {

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, "\115\101\103\110\111\116\105",
            "\103\117\116\123\124\137\104\105\106\123", "\123\105\124\137\104\105\106\123", "\126\101\122\137\104\105\106\123", null,
            null, "\174\174", "\46\46", "\75", "\176", null, "\74", "\74\75", "\76", "\76\75",
            "\72", "\146\141\154\163\145", "\164\162\165\145", "\55", "\53", "\52", "\57", "\45",
            null, null, null, null, null, "\50", "\51", "\173", "\175", "\54",};
    /** Lexer state names. */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final int[] jjnextStates = {
            18, 19, 21, 14, 16, 5, 6,
    };
    static final long[] jjtoToken = {
            0x3fffffffe1L,
    };
    static final long[] jjtoSkip = {
            0x1eL,
    };
    static private final int[] jjrounds = new int[22];
    static private final int[] jjstateSet = new int[44];
    /** Debug output. */
    public static java.io.PrintStream debugStream = System.out;
    static protected SimpleCharStream input_stream;
    static protected char curChar;
    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /** Constructor. */
    public BParserTokenManager(SimpleCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    /** Constructor. */
    public BParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /** Set debug output. */
    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x6001e0L) != 0L) {
                    jjmatchedKind = 32;
                    return 8;
                }
                if ((active0 & 0x2000L) != 0L)
                    return 11;
                if ((active0 & 0x30000L) != 0L)
                    return 14;
                return -1;
            case 1:
                if ((active0 & 0x6001e0L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 1;
                    return 8;
                }
                if ((active0 & 0x20000L) != 0L)
                    return 15;
                return -1;
            case 2:
                if ((active0 & 0x6001e0L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 2;
                    return 8;
                }
                return -1;
            case 3:
                if ((active0 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x400000L) != 0L)
                    return 8;
                if ((active0 & 0x200060L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 3;
                    return 8;
                }
                return -1;
            case 4:
                if ((active0 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x200000L) != 0L)
                    return 8;
                if ((active0 & 0x60L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 4;
                    return 8;
                }
                return -1;
            case 5:
                if ((active0 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x40L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active0 & 0x20L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 5;
                    return 8;
                }
                return -1;
            case 6:
                if ((active0 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x40L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                if ((active0 & 0x20L) != 0L)
                    return 8;
                return -1;
            case 7:
                if ((active0 & 0x180L) != 0L) {
                    if (jjmatchedPos < 2) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 2;
                    }
                    return -1;
                }
                if ((active0 & 0x40L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                return -1;
            case 8:
                if ((active0 & 0x40L) != 0L) {
                    if (jjmatchedPos < 4) {
                        jjmatchedKind = 32;
                        jjmatchedPos = 4;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 37:
                return jjStopAtPos(0, 27);
            case 38:
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 40:
                return jjStopAtPos(0, 33);
            case 41:
                return jjStopAtPos(0, 34);
            case 42:
                return jjStopAtPos(0, 25);
            case 43:
                return jjStopAtPos(0, 24);
            case 44:
                return jjStopAtPos(0, 37);
            case 45:
                return jjStopAtPos(0, 23);
            case 47:
                return jjStopAtPos(0, 26);
            case 58:
                return jjStopAtPos(0, 20);
            case 60:
                jjmatchedKind = 16;
                return jjMoveStringLiteralDfa1_0(0x20000L);
            case 61:
                return jjStartNfaWithStates_0(0, 13, 11);
            case 62:
                jjmatchedKind = 18;
                return jjMoveStringLiteralDfa1_0(0x80000L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 77:
                return jjMoveStringLiteralDfa1_0(0x20L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 86:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            case 123:
                return jjStopAtPos(0, 35);
            case 124:
                return jjMoveStringLiteralDfa1_0(0x800L);
            case 125:
                return jjStopAtPos(0, 36);
            case 126:
                return jjStopAtPos(0, 14);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active0 & 0x1000L) != 0L)
                    return jjStopAtPos(1, 12);
                break;
            case 61:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(1, 17, 15);
                else if ((active0 & 0x80000L) != 0L)
                    return jjStopAtPos(1, 19);
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x120L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            case 79:
                return jjMoveStringLiteralDfa2_0(active0, 0x40L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
            case 124:
                if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(1, 11);
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa3_0(active0, 0x20L);
            case 78:
                return jjMoveStringLiteralDfa3_0(active0, 0x40L);
            case 82:
                return jjMoveStringLiteralDfa3_0(active0, 0x100L);
            case 84:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 72:
                return jjMoveStringLiteralDfa4_0(active0, 0x20L);
            case 83:
                return jjMoveStringLiteralDfa4_0(active0, 0x40L);
            case 95:
                return jjMoveStringLiteralDfa4_0(active0, 0x180L);
            case 101:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 22, 8);
                break;
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 68:
                return jjMoveStringLiteralDfa5_0(active0, 0x180L);
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x20L);
            case 84:
                return jjMoveStringLiteralDfa5_0(active0, 0x40L);
            case 101:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(4, 21, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa6_0(active0, 0x180L);
            case 78:
                return jjMoveStringLiteralDfa6_0(active0, 0x20L);
            case 95:
                return jjMoveStringLiteralDfa6_0(active0, 0x40L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 68:
                return jjMoveStringLiteralDfa7_0(active0, 0x40L);
            case 69:
                if ((active0 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(6, 5, 8);
                break;
            case 70:
                return jjMoveStringLiteralDfa7_0(active0, 0x180L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    static private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa8_0(active0, 0x40L);
            case 83:
                if ((active0 & 0x80L) != 0L)
                    return jjStopAtPos(7, 7);
                else if ((active0 & 0x100L) != 0L)
                    return jjStopAtPos(7, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    static private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 70:
                return jjMoveStringLiteralDfa9_0(active0, 0x40L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    static private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 83:
                if ((active0 & 0x40L) != 0L)
                    return jjStopAtPos(9, 6);
                break;
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 22;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 15:
                            if (curChar == 61)
                                jjCheckNAdd(13);
                            else if (curChar == 62) {
                                if (kind > 9)
                                    kind = 9;
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 29)
                                    kind = 29;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 60)
                                jjAddStates(3, 4);
                            else if (curChar == 61)
                                jjCheckNAddTwoStates(10, 11);
                            else if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 4;
                            else if (curChar == 33)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 11:
                            if (curChar == 61)
                                jjCheckNAdd(10);
                            else if (curChar == 62) {
                                if (kind > 10)
                                    kind = 10;
                            }
                            break;
                        case 14:
                            if (curChar == 61)
                                jjstateSet[jjnewStateCnt++] = 15;
                            if (curChar == 61)
                                jjCheckNAdd(13);
                            break;
                        case 0:
                            if (curChar == 61 && kind > 15)
                                kind = 15;
                            break;
                        case 3:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjAddStates(5, 6);
                            break;
                        case 6:
                            if (curChar == 34 && kind > 31)
                                kind = 31;
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 9:
                            if (curChar == 61)
                                jjCheckNAddTwoStates(10, 11);
                            break;
                        case 10:
                            if (curChar == 62 && kind > 10)
                                kind = 10;
                            break;
                        case 12:
                            if (curChar == 60)
                                jjAddStates(3, 4);
                            break;
                        case 13:
                            if (curChar == 62 && kind > 9)
                                kind = 9;
                            break;
                        case 16:
                            if (curChar == 61)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 29)
                                kind = 29;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(18, 19);
                            break;
                        case 19:
                            if (curChar == 46)
                                jjCheckNAdd(20);
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 28)
                                kind = 28;
                            jjCheckNAdd(20);
                            break;
                        case 21:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 29)
                                kind = 29;
                            jjCheckNAdd(21);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 32)
                                    kind = 32;
                                jjCheckNAdd(8);
                            } else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 2:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 4:
                        case 5:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(5, 6);
                            break;
                        case 7:
                        case 8:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 32)
                                kind = 32;
                            jjCheckNAdd(8);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = SimpleCharStream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 22; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
        beginLine = SimpleCharStream.getBeginLine();
        beginColumn = SimpleCharStream.getBeginColumn();
        endLine = SimpleCharStream.getEndLine();
        endColumn = SimpleCharStream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    /** Get the next Token. */
    public static Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = SimpleCharStream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                SimpleCharStream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = SimpleCharStream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    SimpleCharStream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = SimpleCharStream.getEndLine();
            int error_column = SimpleCharStream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                SimpleCharStream.readChar();
                SimpleCharStream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                SimpleCharStream.backup(1);
                error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
