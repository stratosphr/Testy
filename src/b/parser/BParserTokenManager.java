/* Generated By:JJTree&JavaCC: Do not edit this line. BParserTokenManager.java */
package b.parser;

/**
 * Token Manager.
 */
public class BParserTokenManager implements BParserConstants {

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, "\115\101\103\110\111\116\105", null, null, null,
            null, null, null, "\105\126\105\116\124\123", "\123\113\111\120", "\72\75",
            "\123\105\114\105\103\124", "\124\110\105\116", "\105\116\104", "\111\106", "\105\114\123\105",
            "\103\110\117\111\103\105", "\117\122", "\101\116\131", "\127\110\105\122\105", "\73", "\55\76", null,
            null, "\174\174", "\46\46", "\75", "\41", null, "\74", "\74\75", "\76", "\76\75",
            "\72", "\41\72", "\146\141\154\163\145", "\164\162\165\145", "\55", "\53", "\52",
            "\57", "\45", null, null, null, null, null, "\50", "\51", "\54", "\173", "\175",
            "\133", "\56\56", "\135",};
    /** Lexer state names. */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final int[] jjnextStates = {
            62, 63, 65, 14, 16, 5, 6, 74, 76, 89, 92, 56, 60, 44, 46, 34,
            36, 24, 26,
    };
    static final long[] jjtoToken = {
            0x7ffffffffffffe1L,
    };
    static final long[] jjtoSkip = {
            0x1eL,
    };
    static private final int[] jjrounds = new int[93];
    static private final int[] jjstateSet = new int[186];
    /** Debug output. */
    public static java.io.PrintStream debugStream = System.out;
    static protected SimpleCharStream input_stream;
    static protected char curChar;
    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /** Constructor. */
    public BParserTokenManager(SimpleCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    /** Constructor. */
    public BParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /** Set debug output. */
    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x4080000000L) != 0L)
                    return 0;
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 50;
                    return 56;
                }
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 50;
                    return 74;
                }
                if ((active0 & 0x40000000L) != 0L)
                    return 11;
                if ((active0 & 0x600000000L) != 0L)
                    return 14;
                if ((active0 & 0xa000L) != 0L) {
                    jjmatchedKind = 50;
                    return 44;
                }
                if ((active0 & 0x18000eb1020L) != 0L) {
                    jjmatchedKind = 50;
                    return 8;
                }
                return -1;
            case 1:
                if ((active0 & 0x400000000L) != 0L)
                    return 15;
                if ((active0 & 0x240000L) != 0L)
                    return 8;
                if ((active0 & 0x8000L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 1;
                    return 43;
                }
                if ((active0 & 0x18000db3020L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 1;
                    return 8;
                }
                return -1;
            case 2:
                if ((active0 & 0x1800099b020L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 2;
                    return 8;
                }
                if ((active0 & 0x420000L) != 0L)
                    return 8;
                return -1;
            case 3:
                if ((active0 & 0x8000909020L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 3;
                    return 8;
                }
                if ((active0 & 0x10000092000L) != 0L)
                    return 8;
                return -1;
            case 4:
                if ((active0 & 0x109020L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 4;
                    return 8;
                }
                if ((active0 & 0x8000800000L) != 0L)
                    return 8;
                return -1;
            case 5:
                if ((active0 & 0x20L) != 0L) {
                    jjmatchedKind = 50;
                    jjmatchedPos = 5;
                    return 8;
                }
                if ((active0 & 0x109000L) != 0L)
                    return 8;
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    static private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                jjmatchedKind = 31;
                return jjMoveStringLiteralDfa1_0(0x4000000000L);
            case 37:
                return jjStopAtPos(0, 45);
            case 38:
                return jjMoveStringLiteralDfa1_0(0x20000000L);
            case 40:
                return jjStopAtPos(0, 51);
            case 41:
                return jjStopAtPos(0, 52);
            case 42:
                return jjStopAtPos(0, 43);
            case 43:
                return jjStopAtPos(0, 42);
            case 44:
                return jjStopAtPos(0, 53);
            case 45:
                jjmatchedKind = 41;
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 46:
                return jjMoveStringLiteralDfa1_0(0x200000000000000L);
            case 47:
                return jjStopAtPos(0, 44);
            case 58:
                jjmatchedKind = 37;
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 59:
                return jjStopAtPos(0, 24);
            case 60:
                jjmatchedKind = 33;
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            case 61:
                return jjStartNfaWithStates_0(0, 30, 11);
            case 62:
                jjmatchedKind = 35;
                return jjMoveStringLiteralDfa1_0(0x1000000000L);
            case 65:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 69:
                return jjMoveStringLiteralDfa1_0(0xa1000L);
            case 73:
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 77:
                return jjMoveStringLiteralDfa1_0(0x20L);
            case 79:
                return jjMoveStringLiteralDfa1_0(0x200000L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0xa000L);
            case 84:
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 87:
                return jjMoveStringLiteralDfa1_0(0x800000L);
            case 91:
                return jjStopAtPos(0, 56);
            case 93:
                return jjStopAtPos(0, 58);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x8000000000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x10000000000L);
            case 123:
                return jjStopAtPos(0, 54);
            case 124:
                return jjMoveStringLiteralDfa1_0(0x10000000L);
            case 125:
                return jjStopAtPos(0, 55);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    static private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStopAtPos(1, 29);
                break;
            case 46:
                if ((active0 & 0x200000000000000L) != 0L)
                    return jjStopAtPos(1, 57);
                break;
            case 58:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStopAtPos(1, 38);
                break;
            case 61:
                if ((active0 & 0x4000L) != 0L)
                    return jjStopAtPos(1, 14);
                else if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 34, 15);
                else if ((active0 & 0x1000000000L) != 0L)
                    return jjStopAtPos(1, 36);
                break;
            case 62:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStopAtPos(1, 25);
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x20L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
            case 70:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(1, 18, 8);
                break;
            case 72:
                return jjMoveStringLiteralDfa2_0(active0, 0x910000L);
            case 75:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
            case 76:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
            case 78:
                return jjMoveStringLiteralDfa2_0(active0, 0x420000L);
            case 82:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(1, 21, 8);
                break;
            case 86:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
            case 124:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStopAtPos(1, 28);
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa3_0(active0, 0x20L);
            case 68:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(2, 17, 8);
                break;
            case 69:
                return jjMoveStringLiteralDfa3_0(active0, 0x811000L);
            case 73:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
            case 89:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(2, 22, 8);
                break;
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(3, 19, 8);
                return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
            case 72:
                return jjMoveStringLiteralDfa4_0(active0, 0x20L);
            case 73:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
            case 78:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(3, 16, 8);
                return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
            case 80:
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(3, 13, 8);
                break;
            case 82:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
            case 101:
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 40, 8);
                break;
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa5_0(active0, 0x108000L);
            case 69:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(4, 23, 8);
                break;
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x20L);
            case 84:
                return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
            case 101:
                if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 39, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(5, 20, 8);
                break;
            case 78:
                return jjMoveStringLiteralDfa6_0(active0, 0x20L);
            case 83:
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(5, 12, 8);
                break;
            case 84:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(5, 15, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(6, 5, 8);
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = SimpleCharStream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 93;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 15:
                            if (curChar == 61)
                                jjCheckNAdd(13);
                            else if (curChar == 62) {
                                if (kind > 26)
                                    kind = 26;
                            }
                            break;
                        case 11:
                            if (curChar == 61)
                                jjCheckNAdd(10);
                            else if (curChar == 62) {
                                if (kind > 27)
                                    kind = 27;
                            }
                            break;
                        case 74:
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 56:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 43:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 14:
                            if (curChar == 61)
                                jjstateSet[jjnewStateCnt++] = 15;
                            if (curChar == 61)
                                jjCheckNAdd(13);
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 47)
                                    kind = 47;
                                jjCheckNAddStates(0, 2);
                            } else if (curChar == 60)
                                jjAddStates(3, 4);
                            else if (curChar == 61)
                                jjCheckNAddTwoStates(10, 11);
                            else if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 4;
                            else if (curChar == 33)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 0:
                            if (curChar == 61 && kind > 32)
                                kind = 32;
                            break;
                        case 3:
                            if (curChar == 34)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjAddStates(5, 6);
                            break;
                        case 6:
                            if (curChar == 34 && kind > 49)
                                kind = 49;
                            break;
                        case 9:
                            if (curChar == 61)
                                jjCheckNAddTwoStates(10, 11);
                            break;
                        case 10:
                            if (curChar == 62 && kind > 27)
                                kind = 27;
                            break;
                        case 12:
                            if (curChar == 60)
                                jjAddStates(3, 4);
                            break;
                        case 13:
                            if (curChar == 62 && kind > 26)
                                kind = 26;
                            break;
                        case 16:
                            if (curChar == 61)
                                jjstateSet[jjnewStateCnt++] = 15;
                            break;
                        case 61:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 62:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(62, 63);
                            break;
                        case 63:
                            if (curChar == 46)
                                jjCheckNAdd(64);
                            break;
                        case 64:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 46)
                                kind = 46;
                            jjCheckNAdd(64);
                            break;
                        case 65:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 47)
                                kind = 47;
                            jjCheckNAdd(65);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 74:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 50)
                                    kind = 50;
                                jjCheckNAdd(8);
                            }
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 91;
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 88;
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 75;
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 73;
                            break;
                        case 56:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 50)
                                    kind = 50;
                                jjCheckNAdd(8);
                            }
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 59;
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 55;
                            break;
                        case 43:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 50)
                                    kind = 50;
                                jjCheckNAdd(8);
                            }
                            if (curChar == 84)
                                jjCheckNAdd(38);
                            if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 42;
                            break;
                        case 44:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 50)
                                    kind = 50;
                                jjCheckNAdd(8);
                            }
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 45;
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 43;
                            break;
                        case 1:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 50)
                                    kind = 50;
                                jjCheckNAdd(8);
                            } else if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 0;
                            if (curChar == 73)
                                jjAddStates(7, 10);
                            else if (curChar == 67)
                                jjAddStates(11, 12);
                            else if (curChar == 83)
                                jjAddStates(13, 14);
                            else if (curChar == 86)
                                jjAddStates(15, 16);
                            else if (curChar == 70)
                                jjAddStates(17, 18);
                            break;
                        case 2:
                            if (curChar == 92)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 4:
                        case 5:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(5, 6);
                            break;
                        case 7:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 8:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 50)
                                kind = 50;
                            jjCheckNAdd(8);
                            break;
                        case 17:
                            if (curChar == 70)
                                jjAddStates(17, 18);
                            break;
                        case 18:
                            if (curChar == 83 && kind > 9)
                                kind = 9;
                            break;
                        case 19:
                            if (curChar == 70)
                                jjCheckNAdd(18);
                            break;
                        case 20:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 19;
                            break;
                        case 21:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 22:
                            if (curChar == 95)
                                jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 23:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 22;
                            break;
                        case 24:
                            if (curChar == 85)
                                jjstateSet[jjnewStateCnt++] = 23;
                            break;
                        case 25:
                            if (curChar == 78)
                                jjCheckNAdd(18);
                            break;
                        case 26:
                            if (curChar == 85)
                                jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 27:
                            if (curChar == 86)
                                jjAddStates(15, 16);
                            break;
                        case 28:
                            if (curChar == 83 && kind > 8)
                                kind = 8;
                            break;
                        case 29:
                            if (curChar == 70)
                                jjCheckNAdd(28);
                            break;
                        case 30:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 29;
                            break;
                        case 31:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 30;
                            break;
                        case 32:
                            if (curChar == 95)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 33:
                            if (curChar == 82)
                                jjstateSet[jjnewStateCnt++] = 32;
                            break;
                        case 34:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 33;
                            break;
                        case 35:
                            if (curChar == 82)
                                jjCheckNAdd(28);
                            break;
                        case 36:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 35;
                            break;
                        case 37:
                            if (curChar == 83)
                                jjAddStates(13, 14);
                            break;
                        case 38:
                            if (curChar == 83 && kind > 7)
                                kind = 7;
                            break;
                        case 39:
                            if (curChar == 70)
                                jjCheckNAdd(38);
                            break;
                        case 40:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 39;
                            break;
                        case 41:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 40;
                            break;
                        case 42:
                            if (curChar == 95)
                                jjstateSet[jjnewStateCnt++] = 41;
                            break;
                        case 45:
                            if (curChar == 84)
                                jjCheckNAdd(38);
                            break;
                        case 46:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 45;
                            break;
                        case 47:
                            if (curChar == 67)
                                jjAddStates(11, 12);
                            break;
                        case 48:
                            if (curChar == 83 && kind > 6)
                                kind = 6;
                            break;
                        case 49:
                            if (curChar == 70)
                                jjCheckNAdd(48);
                            break;
                        case 50:
                            if (curChar == 69)
                                jjstateSet[jjnewStateCnt++] = 49;
                            break;
                        case 51:
                            if (curChar == 68)
                                jjstateSet[jjnewStateCnt++] = 50;
                            break;
                        case 52:
                            if (curChar == 95)
                                jjstateSet[jjnewStateCnt++] = 51;
                            break;
                        case 53:
                            if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 52;
                            break;
                        case 54:
                            if (curChar == 83)
                                jjstateSet[jjnewStateCnt++] = 53;
                            break;
                        case 55:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        case 57:
                            if (curChar == 84)
                                jjCheckNAdd(48);
                            break;
                        case 58:
                            if (curChar == 83)
                                jjstateSet[jjnewStateCnt++] = 57;
                            break;
                        case 59:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 58;
                            break;
                        case 60:
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 59;
                            break;
                        case 66:
                            if (curChar == 73)
                                jjAddStates(7, 10);
                            break;
                        case 67:
                            if (curChar == 84 && kind > 10)
                                kind = 10;
                            break;
                        case 68:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 67;
                            break;
                        case 69:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 68;
                            break;
                        case 70:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 69;
                            break;
                        case 71:
                            if (curChar == 82)
                                jjstateSet[jjnewStateCnt++] = 70;
                            break;
                        case 72:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 71;
                            break;
                        case 73:
                            if (curChar == 86)
                                jjstateSet[jjnewStateCnt++] = 72;
                            break;
                        case 75:
                            if (curChar == 86 && kind > 10)
                                kind = 10;
                            break;
                        case 76:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 75;
                            break;
                        case 77:
                            if (curChar == 78 && kind > 11)
                                kind = 11;
                            break;
                        case 78:
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 77;
                            break;
                        case 79:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 78;
                            break;
                        case 80:
                            if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 79;
                            break;
                        case 81:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 80;
                            break;
                        case 82:
                            if (curChar == 83)
                                jjstateSet[jjnewStateCnt++] = 81;
                            break;
                        case 83:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 82;
                            break;
                        case 84:
                            if (curChar == 76)
                                jjstateSet[jjnewStateCnt++] = 83;
                            break;
                        case 85:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 84;
                            break;
                        case 86:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 85;
                            break;
                        case 87:
                            if (curChar == 84)
                                jjstateSet[jjnewStateCnt++] = 86;
                            break;
                        case 88:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 87;
                            break;
                        case 89:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 88;
                            break;
                        case 90:
                            if (curChar == 84 && kind > 11)
                                kind = 11;
                            break;
                        case 91:
                            if (curChar == 73)
                                jjstateSet[jjnewStateCnt++] = 90;
                            break;
                        case 92:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 91;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 93 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = SimpleCharStream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 93; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    static public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
        beginLine = SimpleCharStream.getBeginLine();
        beginColumn = SimpleCharStream.getBeginColumn();
        endLine = SimpleCharStream.getEndLine();
        endColumn = SimpleCharStream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    /** Get the next Token. */
    public static Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = SimpleCharStream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                SimpleCharStream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                    curChar = SimpleCharStream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    SimpleCharStream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = SimpleCharStream.getEndLine();
            int error_column = SimpleCharStream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                SimpleCharStream.readChar();
                SimpleCharStream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                SimpleCharStream.backup(1);
                error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
