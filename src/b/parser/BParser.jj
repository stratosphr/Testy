/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BParser.jj */
/*@egen*/options
{
                  
                          
                     
}

PARSER_BEGIN(BParser)
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
public class BParser/*@bgen(jjtree)*/implements BParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBParserState jjtree = new JJTBParserState();

/*@egen*/

    private static BParser singleton;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

}

PARSER_END(BParser)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN : {
    <MACHINE: "MACHINE"> |
    <MINUS: "-"> |
    <PLUS: "+"> |
    <TIMES: "*"> |
    <DIV: "/"> |
    <MOD: "%"> |
    <NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? > |   
    <DIGIT: ["0"-"9"] > |
    <ENUMVALUE: "\"" <IDENTIFIER> "\""> |
    <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
}

SimpleNode parseMachine()             : {/*@bgen(jjtree) MachineAST */
    SimpleNode jjtn000 = new SimpleNode(JJTMACHINEAST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} {/*@bgen(jjtree) MachineAST */
    try {
/*@egen*/
    <MACHINE> name = <IDENTIFIER>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {
        jjtn000.value = name.image;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode parseExpr()          : {/*@bgen(jjtree) ExprAST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ExprAST */
    try {
/*@egen*/
    parseOperators1()
    (   <PLUS>/*@bgen(jjtree) #PlusAST( 2) */
               {
                 SimpleNode jjtn001 = new SimpleNode(JJTPLUSAST);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ parseOperators1()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/            
    |   <MINUS>/*@bgen(jjtree) #MinusAST( 2) */
                {
                  SimpleNode jjtn002 = new SimpleNode(JJTMINUSAST);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ parseOperators1()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/             
    )*/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parseOperators1()       : {
} {
    parseTerminal()
    (   <TIMES>/*@bgen(jjtree) #TimesAST( 2) */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTTIMESAST);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ parseTerminal()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/             
    |   <DIV>/*@bgen(jjtree) #DivAST( 2) */
              {
                SimpleNode jjtn002 = new SimpleNode(JJTDIVAST);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ parseTerminal()/*@bgen(jjtree)*/
              } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  throw (RuntimeException)jjte002;
                }
                if (jjte002 instanceof ParseException) {
                  throw (ParseException)jjte002;
                }
                throw (Error)jjte002;
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
              }
/*@egen*/           
    |   <MOD>/*@bgen(jjtree) #ModAST( 2) */
              {
                SimpleNode jjtn003 = new SimpleNode(JJTMODAST);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
              }
              try {
/*@egen*/ parseTerminal()/*@bgen(jjtree)*/
              } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  throw (RuntimeException)jjte003;
                }
                if (jjte003 instanceof ParseException) {
                  throw (ParseException)jjte003;
                }
                throw (Error)jjte003;
              } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003,  2);
                }
              }
/*@egen*/           
    )*
}

void parseTerminal()       : {
    Token t;
} {
    t = <IDENTIFIER>/*@bgen(jjtree) #IdentifierAST( 0) */
                     {
                       SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIERAST);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001,  0);
                       jjtc001 = false;
                     }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  0);
                       }
                     }
/*@egen*/                   |
    t = <NUMBER>/*@bgen(jjtree) #NumberAST( 0) */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTNUMBERAST);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002,  0);
                   jjtc002 = false;
                 }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  0);
                   }
                 }
/*@egen*/               |
    "(" parseExpr() ")"
}


