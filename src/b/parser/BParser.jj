/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BParser.jj */
/*@egen*/options
{
    //LOOKAHEAD=3;
    //FORCE_LA_CHECK=true;
}

PARSER_BEGIN(BParser)
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
public class BParser/*@bgen(jjtree)*/implements BParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTBParserState jjtree = new JJTBParserState();

/*@egen*/

    private static BParser singleton;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

}

PARSER_END(BParser)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN : {
    <MACHINE: "MACHINE"> |
    <PLUS: "+"> |
    <NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? > |   
    <DIGIT: ["0"-"9"] > |
    <ENUMVALUE: "\"" <IDENTIFIER> "\""> |
    <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
}

SimpleNode parseMachine()             : {/*@bgen(jjtree) MachineAST */
    SimpleNode jjtn000 = new SimpleNode(JJTMACHINEAST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token name;
} {/*@bgen(jjtree) MachineAST */
    try {
/*@egen*/
    <MACHINE> name = <IDENTIFIER>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {
        jjtn000.value = name.image;
        return jjtn000;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

SimpleNode parseExpr()          : {/*@bgen(jjtree) ExprAST */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRAST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
} {/*@bgen(jjtree) ExprAST */
    try {
/*@egen*/
    terminal() (<PLUS> terminal() { jjtn000.value = "+"; })*/*@bgen(jjtree)*/
                                                             {
                                                               jjtree.closeNodeScope(jjtn000, true);
                                                               jjtc000 = false;
                                                             }
/*@egen*/ {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void terminal()              : {/*@bgen(jjtree) TerminalAST */
    SimpleNode jjtn000 = new SimpleNode(JJTTERMINALAST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
} {/*@bgen(jjtree) TerminalAST */
    try {
/*@egen*/
    t = <IDENTIFIER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.value = t.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
