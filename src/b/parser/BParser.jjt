options
{
    NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(BParser)
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
public class BParser {

    private static BParser singleton;
    private static String file;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BParser.file = file;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

    public static void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).setSourceCoordinates(new SourceCoordinates(file, getToken(0).beginLine, getToken(0).endLine, getToken(0).beginColumn, getToken(0).endColumn));
    }

    public static void jjtreeCloseNodeScope(Node n) {
    }

}

PARSER_END(BParser)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN : {
    <MACHINE: "MACHINE"> |
    <MINUS: "-"> |
    <PLUS: "+"> |
    <TIMES: "*"> |
    <DIV: "/"> |
    <MOD: "%"> |
    <NUMBER: (<DIGIT>)+ ( "." (<DIGIT>)+ )? > |   
    <DIGIT: ["0"-"9"] > |
    <ENUMVALUE: "\"" <IDENTIFIER> "\""> |
    <IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])*>
}

SimpleNode parseMachine() #MachineAST : {
    Token name;
} {
    <MACHINE> name = <IDENTIFIER> {
        jjtThis.value = name.image;
        return jjtThis;
    }
}

SimpleNode parseExpr() #ExprAST : {
} {
    parseOperators1()
    (   <PLUS> parseOperators1() #PlusAST(2)
    |   <MINUS> parseOperators1() #MinusAST(2)
    )* {
        return jjtThis;
    }
}

void parseOperators1() #void : {
} {
    parseTerminal()
    (   <TIMES> parseTerminal() #TimesAST(2)
    |   <DIV> parseTerminal() #DivAST(2)
    |   <MOD> parseTerminal() #ModAST(2)
    )*
}

void parseTerminal() #void : {
    Token t;
} {
    t = <IDENTIFIER> { jjtThis.value = t.image; } #IdentifierAST(0) |
    t = <NUMBER> { jjtThis.value = t.image; } #NumberAST(0) |
    "(" parseExpr() ")"
}


