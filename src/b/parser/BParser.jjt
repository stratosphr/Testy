// TODO: Add <EOF> at the end of the pulic parsing functions

options
{
    NODE_SCOPE_HOOK = true;
    VISITOR = true;
    MULTI = true;
    VISITOR_RETURN_TYPE = "Object";
    VISITOR_DATA_TYPE = "java.util.Map<Object, Object>";
    NODE_FACTORY=false;
}

PARSER_BEGIN(BParser)
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
public class BParser {

    private static BParser singleton;
    private static String file;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BParser.file = file;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

    public static void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).setSourceCoordinates(new SourceCoordinates(file, getToken(0).beginLine, getToken(0).endLine, getToken(0).beginColumn, getToken(0).endColumn));
    }

    public static void jjtreeCloseNodeScope(Node n) {
    }

}

PARSER_END(BParser)

SKIP : {
    " "
|   "\r"
|   "\t"
|   "\n"
}

TOKEN : {
    < BOOL_TYPE: "bool" > |
    < INT_TYPE: "int" > |
    < REAL_TYPE: "real" > |
    < SET_TYPE: "set" > |
    < STRING_TYPE: "string" > |
    < MACHINE: "MACHINE" > |
    < CONST_DEFS: "CONST_DEFS" | "CONSTS" > |
    < SET_DEFS: "SET_DEFS" | "SETS" > |
    < VAR_DEFS: "VAR_DEFS" | "VARS" > |
    < FUN_DEFS: "FUN_DEFS" | "FUNS" > |
    < INVARIANT: "INVARIANT" | "INV" > |
    < INITIALISATION: "INITIALISATION" | "INIT" > |
    < EVENTS: "EVENTS" > |
    < SUB_SKIP: "SKIP" > |
    < ASSIGN: ":=" > |
    < SELECT: "SELECT" > |
    < THEN: "THEN" > |
    < END: "END" > |
    < IF: "IF" > |
    < ELSE: "ELSE" > |
    < CHOICE: "CHOICE" > |
    < SUB_OR: "OR" > |
    < ANY: "ANY" > |
    < WHERE: "WHERE" > |
    < SEQUENCE: ";" > |
    < TO: "->" > |
    < EQUIV: "<=>" | "<==>" > |
    < IMPLIES: "=>" | "==>" > |
    < OR: "||" > |
    < AND: "&&" > |
    < EQ: "=" > |
    < NOT: "!" > |
    < NEQ: "!=" | "\\=" > |
    < LT: "<" > |
    < LE: "<=" > |
    < GT: ">" > |
    < GE: ">=" > |
    < IN: ":" > |
    < EXISTS: "â‚¬" | "exists" > |
    < FORALL: "#" | "forall" > |
    < NOT_IN: "!:" > |
    < FALSE: "false" > |
    < TRUE: "true" > |
    < MINUS: "-" > |
    < PLUS: "+" > |
    < TIMES: "*" > |
    < DIV: "/" > |
    < MOD: "%" > |
    < DOUBLE: (<DIGIT>)+ "." (<DIGIT>)+ > |   
    < INT: (<DIGIT>)+ > |   
    < DIGIT: ["0"-"9"] > |
    < STRING: "\"" <IDENTIFIER> "\"" > |
    < IDENTIFIER: ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9"])* >
}

public SimpleNode parseMachine() #Machine : {
    Token name;
} {
    <MACHINE> name = <IDENTIFIER> {
        jjtThis.setValue(name.image);
    }
    (parseConstDefs())?
    (parseSetDefs())?
    (parseVarDefs())?
    (parseFunDefs())?
    (parseInvariant())?
    (parseInitialisation())?
    (parseEvents())?
    <EOF>
    {
        return jjtThis;
    }
}

private void parseConstDefs() #void : {
} {
    <CONST_DEFS> (parseConstDef() #ConstDef)+ #ConstDefs
}

private void parseConstDef() #void : {
    Token t;
} {
    parseType() parseIdentifier() <EQ> parseExpr0()
}

private void parseSetDefs() #void : {
} {
    <SET_DEFS> (parseSetDef())+ #SetDefs
}

private void parseSetDef() #SetDef : {
    Token t;
} {
    parseIdentifier() <EQ> parseExpr0()
}

private void parseVarDefs() #void : {
} {
    <VAR_DEFS> (parseVarDef())+ #VarDefs
}

private void parseVarDef() #VarDef : {
    Token t;
} {
    parseIdentifier() <IN> parseExpr0()
}

private void parseFunDefs() #FunDefs : {
} {
    <FUN_DEFS> (parseFunDef())+ 
}

private void parseFunDef() #FunDef : {
    Token t;
} {
    parseIdentifier() <IN> parseExpr0() <TO> parseExpr0()
}

private void parseInvariant() #void : {
} {
    <INVARIANT> parseExpr0() #Invariant
}

private void parseInitialisation() #void : {
} {
    <INITIALISATION> parseSubstitution() #Substitution
}

private void parseEvents() #Events : {
} {
    <EVENTS> (parseIdentifier() <EQ> parseSubstitution() #Event(2))+
}

private void parseSubstitution() #void : {
    Token t;
} {
    (   <SUB_SKIP> #Skip 
    |   parseIdentifier()
        (   <ASSIGN> parseExpr0() #VarAssignment(2)
        |   "(" parseExpr0() ")" <ASSIGN> parseExpr0() #FunAssignment(3)
        )
    |   <SELECT> parseExpr0() <THEN> parseSubstitution() <END> #Select(2)
    |   <IF> parseExpr0() <THEN> parseSubstitution() <ELSE> parseSubstitution() <END> #IfThenElse(3)
    |   (<CHOICE> parseSubstitution() (<SUB_OR> parseSubstitution())* <END>) #Choice
    |   (<ANY> (parseDef() ("," parseDef())*) #QuantifiedSymbolsDefs <WHERE> parseExpr0() <THEN> parseSubstitution() <END>) #Any(3)
    ) (LOOKAHEAD(2) <SEQUENCE> parseSubstitution() (LOOKAHEAD(2) <SEQUENCE>)? #Sequence(2))*
}

private void parseDef() #void : {
    Token t;
} {
    (parseIdentifier() <IN> parseExpr0() (<TO> parseExpr0())?) #Def
}

public SimpleNode parseExpr() #Expr : {
} {
    parseExpr0() <EOF>
    {
        return jjtThis;
    }
}

private void parseExpr0() #Expr : {
} {
    parseExpr1() (<EQUIV> parseExpr1() #Equiv(2))*
}

private void parseExpr1() #void : {
} {
    parseExpr2() (<IMPLIES> parseExpr2() #Implies(2))*
}

private void parseExpr2() #void : {
} {
    parseExpr3() (<OR> parseExpr3() #Or(2))*
}

private void parseExpr3() #void : {
} {
    parseExpr4() (<AND> parseExpr4() #And(2))*
}

private void parseExpr4() #void : {
} {
    parseExpr5() 
    (   <EQ> parseExpr5() #Eq(2)
    |   <NEQ> parseExpr5() #NEq(2)
    )*
}

private void parseExpr5() #void : {
} {
    parseExpr6() 
    (   <IN> parseExpr6() #In(2)
    |   <NOT_IN> parseExpr6() #NotIn(2)
    )*
}

private void parseExpr6() #void : {
} {
    parseExpr7()
    (   <LT> parseExpr7() #LT(2)
    |   <LE> parseExpr7() #LE(2)
    |   <GT> parseExpr7() #GT(2)
    |   <GE> parseExpr7() #GE(2)
    )?
}

private void parseExpr7() #void : {
} {
    parseExpr8() 
    (   <PLUS> parseExpr8() #Plus(2)
    |   <MINUS> parseExpr8() #Minus(2)
    )*
}

private void parseExpr8() #void : {
} {
    parseTerminal()
    (   <TIMES> parseTerminal() #Times(2)
    |   <DIV> parseTerminal() #Div(2)
    |   <MOD> parseTerminal() #Mod(2)
    )*
}

private void parseTerminal() #void : {
    Token t;
} {
    <NOT> parseTerminal() #Not(1) |
    <MINUS> parseTerminal() #UMinus(1) |
    <PLUS> parseTerminal() |
    parseIdentifier() ("(" parseExpr0() ")" #FunCall(2))? |
    <FALSE> #False(0) |
    <TRUE> #True(0) |
    t = <DOUBLE> { jjtThis.setValue(t.image); } #Double(0) |
    t = <INT> { jjtThis.setValue(t.image); } #Int(0) |
    "(" parseExpr0() ")" |
    (<EXISTS> "(" (parseDef() ("," parseDef())*) #QuantifiedSymbolsDefs ")" "." "(" parseExpr0() ")") #Exists(2) |
    (<FORALL> "(" (parseDef() ("," parseDef())*) #QuantifiedSymbolsDefs ")" "." "(" parseExpr0() ")") #ForAll(2) |
    parseSetExpr()
}

private void parseIdentifier() #void : {
    Token t;
} {
    t = <IDENTIFIER> { jjtThis.setValue(t.image); } #Identifier(0)
}

private void parseSetExpr() #void : {
} {
    ("{" (parseExpr0())? ("," parseExpr0())* "}") #Set |
    "[" parseExpr0() ".." parseExpr0() "]" #Range(2)
}

private void parseType() #Type : {
} {
    <BOOL_TYPE> #BoolType |
    <INT_TYPE> #IntType |
    <REAL_TYPE> #RealType |
    (<SET_TYPE> "<" parseType() ">") #SetType |
    <STRING_TYPE> #StringType 
}
