/* Generated By:JJTree&JavaCC: Do not edit this line. BParser.java */
package b.parser;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

@SuppressWarnings("ALL")
public class BParser/*@bgen(jjtree)*/ implements BParserTreeConstants, BParserConstants {/*@bgen(jjtree)*/
  protected static JJTBParserState jjtree = new JJTBParserState();
    private static BParser singleton;
    private static String file;

    public static void setInputFile(String file) throws ParseException, FileNotFoundException {
        BParser.file = file;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
        if (singleton == null) {
            singleton = new BParser(bufferedReader);
        } else {
            BParser.ReInit(bufferedReader);
        }
    }

    public static void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).setSourceCoordinates(new SourceCoordinates(file, getToken(0).beginLine, getToken(0).endLine, getToken(0).beginColumn, getToken(0).endColumn));
    }

    public static void jjtreeCloseNodeScope(Node n) {
    }

    static final private int[] jj_la1 = new int[13];
    /**
     * Generated Token Manager.
     */
    static public BParserTokenManager token_source;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static SimpleCharStream jj_input_stream;
    static private boolean jj_initialized_once = false;
    static private int jj_ntk;
    static private int jj_gen;
    static private int[] jj_la1_0;
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    static {
        jj_la1_init_0();
    }

    /**
     * Constructor with InputStream.
     */
    public BParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public BParser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new BParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public BParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new BParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public BParser(BParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    static final public SimpleNode parseMachine() throws ParseException {
        /*@bgen(jjtree) Machine */
        ASTMachine jjtn000 = new ASTMachine(JJTMACHINE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        Token name;
        try {
            jj_consume_token(MACHINE);
            name = jj_consume_token(IDENTIFIER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            jjtn000.setValue(name.image);
            {
                if (true) return jjtn000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final public SimpleNode parseExpr0() throws ParseException {
        /*@bgen(jjtree) Expr */
        ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
        try {
            parseExpr1();
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case EQUIV:
                        ;
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                jj_consume_token(EQUIV);
                ASTEquiv jjtn001 = new ASTEquiv(JJTEQUIV);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    parseExpr1();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, 2);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
            {
                if (true) return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtreeCloseNodeScope(jjtn000);
            }
        }
        throw new Error("Missing return statement in function");
    }

    static final private void parseExpr1() throws ParseException {
        parseExpr2();
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IMPLIES:
                    ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_2;
            }
            jj_consume_token(IMPLIES);
            ASTImplies jjtn001 = new ASTImplies(JJTIMPLIES);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr2();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr2() throws ParseException {
        parseExpr3();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OR:
                    ;
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_3;
            }
            jj_consume_token(OR);
            ASTOr jjtn001 = new ASTOr(JJTOR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr3();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr3() throws ParseException {
        parseExpr4();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AND:
                    ;
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_4;
            }
            jj_consume_token(AND);
            ASTAnd jjtn001 = new ASTAnd(JJTAND);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
            try {
                parseExpr4();
            } catch (Throwable jjte001) {
                if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                } else {
                    jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                    {
                        if (true) throw (RuntimeException) jjte001;
                    }
                }
                if (jjte001 instanceof ParseException) {
                    {
                        if (true) throw (ParseException) jjte001;
                    }
                }
                {
                    if (true) throw (Error) jjte001;
                }
            } finally {
                if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, 2);
                    jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    static final private void parseExpr4() throws ParseException {
        parseExpr5();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                case IN:
                    ;
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                    jj_consume_token(EQ);
                    ASTEq jjtn001 = new ASTEq(JJTEQ);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseExpr5();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case IN:
                    jj_consume_token(IN);
                    ASTIn jjtn002 = new ASTIn(JJTIN);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseExpr6();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseExpr5() throws ParseException {
        parseExpr6();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LT:
            case LE:
            case GT:
            case GE:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LT:
                        jj_consume_token(LT);
                        ASTLT jjtn001 = new ASTLT(JJTLT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                        try {
                            parseExpr6();
                        } catch (Throwable jjte001) {
                            if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte001;
                                }
                            }
                            if (jjte001 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte001;
                                }
                            }
                            {
                                if (true) throw (Error) jjte001;
                            }
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, 2);
                                jjtreeCloseNodeScope(jjtn001);
                            }
                        }
                        break;
                    case LE:
                        jj_consume_token(LE);
                        ASTLE jjtn002 = new ASTLE(JJTLE);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
                        try {
                            parseExpr6();
                        } catch (Throwable jjte002) {
                            if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte002;
                                }
                            }
                            if (jjte002 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte002;
                                }
                            }
                            {
                                if (true) throw (Error) jjte002;
                            }
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, 2);
                                jjtreeCloseNodeScope(jjtn002);
                            }
                        }
                        break;
                    case GT:
                        jj_consume_token(GT);
                        ASTGT jjtn003 = new ASTGT(JJTGT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                        try {
                            parseExpr6();
                        } catch (Throwable jjte003) {
                            if (jjtc003) {
                                jjtree.clearNodeScope(jjtn003);
                                jjtc003 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte003 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte003;
                                }
                            }
                            if (jjte003 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte003;
                                }
                            }
                            {
                                if (true) throw (Error) jjte003;
                            }
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, 2);
                                jjtreeCloseNodeScope(jjtn003);
                            }
                        }
                        break;
                    case GE:
                        jj_consume_token(GE);
                        ASTGE jjtn004 = new ASTGE(JJTGE);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtreeOpenNodeScope(jjtn004);
                        try {
                            parseExpr6();
                        } catch (Throwable jjte004) {
                            if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                            } else {
                                jjtree.popNode();
                            }
                            if (jjte004 instanceof RuntimeException) {
                                {
                                    if (true) throw (RuntimeException) jjte004;
                                }
                            }
                            if (jjte004 instanceof ParseException) {
                                {
                                    if (true) throw (ParseException) jjte004;
                                }
                            }
                            {
                                if (true) throw (Error) jjte004;
                            }
                        } finally {
                            if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, 2);
                                jjtreeCloseNodeScope(jjtn004);
                            }
                        }
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
    }

    static final private void parseExpr6() throws ParseException {
        parseExpr7();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case MINUS:
                case PLUS:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseExpr7();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    ASTMinus jjtn002 = new ASTMinus(JJTMINUS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseExpr7();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseExpr7() throws ParseException {
        parseTerminal();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                case DIV:
                case MOD:
                    ;
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                    jj_consume_token(TIMES);
                    ASTTimes jjtn001 = new ASTTimes(JJTTIMES);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtreeOpenNodeScope(jjtn001);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte001) {
                        if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte001;
                            }
                        }
                        if (jjte001 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte001;
                            }
                        }
                        {
                            if (true) throw (Error) jjte001;
                        }
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, 2);
                            jjtreeCloseNodeScope(jjtn001);
                        }
                    }
                    break;
                case DIV:
                    jj_consume_token(DIV);
                    ASTDiv jjtn002 = new ASTDiv(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte002) {
                        if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte002;
                            }
                        }
                        if (jjte002 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte002;
                            }
                        }
                        {
                            if (true) throw (Error) jjte002;
                        }
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, 2);
                            jjtreeCloseNodeScope(jjtn002);
                        }
                    }
                    break;
                case MOD:
                    jj_consume_token(MOD);
                    ASTMod jjtn003 = new ASTMod(JJTMOD);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                    try {
                        parseTerminal();
                    } catch (Throwable jjte003) {
                        if (jjtc003) {
                            jjtree.clearNodeScope(jjtn003);
                            jjtc003 = false;
                        } else {
                            jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                            {
                                if (true) throw (RuntimeException) jjte003;
                            }
                        }
                        if (jjte003 instanceof ParseException) {
                            {
                                if (true) throw (ParseException) jjte003;
                            }
                        }
                        {
                            if (true) throw (Error) jjte003;
                        }
                    } finally {
                        if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, 2);
                            jjtreeCloseNodeScope(jjtn003);
                        }
                    }
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    static final private void parseTerminal() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MINUS:
                jj_consume_token(MINUS);
                ASTUMinus jjtn001 = new ASTUMinus(JJTUMINUS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
                try {
                    parseTerminal();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) throw (RuntimeException) jjte001;
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) throw (ParseException) jjte001;
                        }
                    }
                    {
                        if (true) throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, 1);
                        jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtreeOpenNodeScope(jjtn002);
                try {
                    jjtree.closeNodeScope(jjtn002, 0);
                    jjtc002 = false;
                    jjtreeCloseNodeScope(jjtn002);
                    jjtn002.setValue(t.image);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, 0);
                        jjtreeCloseNodeScope(jjtn002);
                    }
                }
                break;
            case FALSE:
                ASTFalse jjtn003 = new ASTFalse(JJTFALSE);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtreeOpenNodeScope(jjtn003);
                try {
                    jj_consume_token(FALSE);
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, 0);
                        jjtreeCloseNodeScope(jjtn003);
                    }
                }
                break;
            case TRUE:
                ASTTrue jjtn004 = new ASTTrue(JJTTRUE);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtreeOpenNodeScope(jjtn004);
                try {
                    jj_consume_token(TRUE);
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, 0);
                        jjtreeCloseNodeScope(jjtn004);
                    }
                }
                break;
            case NUMBER:
                t = jj_consume_token(NUMBER);
                ASTNumber jjtn005 = new ASTNumber(JJTNUMBER);
                boolean jjtc005 = true;
                jjtree.openNodeScope(jjtn005);
                jjtreeOpenNodeScope(jjtn005);
                try {
                    jjtree.closeNodeScope(jjtn005, 0);
                    jjtc005 = false;
                    jjtreeCloseNodeScope(jjtn005);
                    jjtn005.setValue(t.image);
                } finally {
                    if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, 0);
                        jjtreeCloseNodeScope(jjtn005);
                    }
                }
                break;
            case 29:
                jj_consume_token(29);
                parseExpr0();
                jj_consume_token(30);
                break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x40, 0x80, 0x100, 0x200, 0x20400, 0x20400, 0x1e000, 0x1e000, 0x300000, 0x300000, 0x1c00000, 0x1c00000, 0x321c0000,};
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
  }

/** Get the next Token. */
static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
}

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[31];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 13; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 31; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(BParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
